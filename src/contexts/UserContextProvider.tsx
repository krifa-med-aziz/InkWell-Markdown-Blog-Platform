import React, { useCallback, useState } from "react";
import { UserContext } from "./UserContext";
import { useLocalStorage } from "../lib/hooks";
import type { TFormData, TUser } from "../lib/type";

export default function UserContextProvider({
  children,
}: {
  children: React.ReactNode;
}) {
  const [currentUser, setCurrentUser] = useLocalStorage<TUser | null>(
    "currentUser",
    null
  );
  const [LoggedIn, setLoggedIn] = useLocalStorage<boolean>("loggedIn", false);
  const [Login, setLogin] = useState(true);
  const [errors, setErrors] = useState<string[]>([]);
  const [formData, setFormData] = useState<TFormData>({
    id: "",
    name: "",
    email: "",
    password: "",
    confirmPassword: "",
    createdAt: "",
  });
  const [users, setUsers] = useLocalStorage<TUser[]>("users", []);

  const userExist = useCallback(
    (email: string) => {
      return users.find((user) => user.email === email);
    },
    [users]
  );

  const validateLogInForm = (email: string, password: string) => {
    const newErrors: string[] = [];
    const user = userExist(email);

    if (!user) {
      newErrors.push("No User found with this email!");
    } else if (user.password !== password) {
      newErrors.push("Password Incorrect!");
    } else {
      setCurrentUser(user);
    }
    setErrors(newErrors);
    return newErrors.length === 0;
  };

  // this function generated by AI
  const validateSignUpForm = () => {
    const newErrors: string[] = [];

    if (!Login && !formData.name.trim()) {
      newErrors.push("Name is required");
    }

    if (!formData.email.trim()) {
      newErrors.push("Email is required");
    } else if (users.some((user) => user.email === formData.email)) {
      newErrors.push("Email is already used");
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.push("Please enter a valid email");
    }

    if (!formData.password.trim()) {
      newErrors.push("Password is required");
    } else if (formData.password.length < 6) {
      newErrors.push("Password must be at least 6 characters");
    }

    if (!Login && formData.password !== formData.confirmPassword) {
      newErrors.push("Passwords do not match");
    }

    setErrors(newErrors);
    return newErrors.length === 0;
  };

  const handleToggleMode = () => {
    setLogin(!Login);
    setErrors([]);
    setFormData({
      id: "",
      name: "",
      email: "",
      password: "",
      confirmPassword: "",
      createdAt: "",
    });
  };

  return (
    <UserContext.Provider
      value={{
        currentUser,
        setCurrentUser,
        LoggedIn,
        setLoggedIn,
        users,
        setUsers,
        Login,
        errors,
        setErrors,
        formData,
        setFormData,
        validateSignUpForm,
        handleToggleMode,
        userExist,
        validateLogInForm,
      }}
    >
      {children}
    </UserContext.Provider>
  );
}
